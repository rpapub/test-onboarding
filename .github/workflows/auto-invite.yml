name: Auto-Invite New Member
on:
  issues:
    types: [opened]

jobs:
  invite:
    runs-on: ubuntu-latest
    env:
      TEAM_LIST: "developers,qa-team"  # <--- Set your team list here
    steps:
      - name: Check if issue is valid onboarding request
        id: check
        run: |
          BODY="${{ github.event.issue.body }}"
          if echo "$BODY" | grep -q "GitHub Username" && echo "$BODY" | grep -q "I agree to follow"; then
            echo "valid_request=true" >> $GITHUB_ENV
          else
            echo "::error ::Issue missing required fields. Exiting."
            echo "valid_request=false" >> $GITHUB_ENV
          fi

      - name: Extract GitHub Username
        if: env.valid_request == 'true'
        id: extract
        run: |
          echo "Extracting GitHub Username..."
          BODY="${{ github.event.issue.body }}"
          USERNAME=$(echo "$BODY" | awk '/### GitHub Username/ {flag=1; next} flag && NF {print; exit}' | xargs)

          if [ -z "$USERNAME" ]; then
            echo "::error ::No username found after parsing. Exiting."
            exit 1
          fi

          echo "Extracted username: $USERNAME"
          echo "USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "username=$USERNAME" >> $GITHUB_OUTPUT

      - name: Lookup GitHub user ID
        if: env.valid_request == 'true'
        id: lookup
        run: |
          echo "Looking up GitHub ID for ${{ env.USERNAME }}"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/users/${{ env.USERNAME }})

          USER_ID=$(echo "$RESPONSE" | jq '.id // empty')

          if [ -z "$USER_ID" ]; then
            echo "::error ::GitHub user not found. Exiting."
            exit 1
          fi

          echo "Resolved USER_ID: $USER_ID"
          echo "USER_ID=$USER_ID" >> $GITHUB_ENV
          echo "user_id=$USER_ID" >> $GITHUB_OUTPUT

      - name: Check org and team memberships
        if: env.valid_request == 'true'
        id: check_membership
        run: |
          echo "Checking if @${{ env.USERNAME }} is already fully onboarded..."

          ORG_MEMBER=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/rpapub/members/${{ env.USERNAME }})

          ALL_TEAMS_OK=true

          IFS=',' read -ra TEAMS <<< "$TEAM_LIST"
          for TEAM in "${TEAMS[@]}"; do
            TEAM=$(echo "$TEAM" | xargs)
            TEAM_MEMBER=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/rpapub/teams/${TEAM}/memberships/${{ env.USERNAME }})

            if [ "$TEAM_MEMBER" -ne 200 ]; then
              echo "❌ Not in team: $TEAM"
              ALL_TEAMS_OK=false
            else
              echo "✅ Already in team: $TEAM"
            fi
          done

          if [ "$ORG_MEMBER" -eq 204 ] && [ "$ALL_TEAMS_OK" == "true" ]; then
            echo "✅ Fully onboarded (org + all teams)."
            echo "already_fully_member=true" >> $GITHUB_ENV
          else
            echo "🚧 Needs onboarding (invite and/or team additions)."
            echo "already_fully_member=false" >> $GITHUB_ENV
          fi

      - name: Invite to organization
        if: env.valid_request == 'true' && env.already_fully_member == 'false'
        run: |
          ORG_MEMBER=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/rpapub/members/${{ env.USERNAME }})

          if [ "$ORG_MEMBER" -ne 204 ]; then
            echo "Inviting USER_ID=${{ env.USER_ID }} to organization..."
            curl -X POST \
              -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/rpapub/invitations \
              -d "{\"invitee_id\": ${{ env.USER_ID }}}"
          else
            echo "Already in organization."
          fi

      - name: Add to teams
        if: env.valid_request == 'true' && env.already_fully_member == 'false'
        run: |
          echo "Adding @${{ env.USERNAME }} to required teams..."
          IFS=',' read -ra TEAMS <<< "$TEAM_LIST"
          for TEAM in "${TEAMS[@]}"; do
            TEAM=$(echo "$TEAM" | xargs)
            TEAM_MEMBER=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/rpapub/teams/${TEAM}/memberships/${{ env.USERNAME }})

            if [ "$TEAM_MEMBER" -ne 200 ]; then
              echo "Adding to team: $TEAM"
              curl -X PUT \
                -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/orgs/rpapub/teams/${TEAM}/memberships/${{ env.USERNAME }}
            else
              echo "Already in team: $TEAM"
            fi
          done

      - name: Comment back on issue
        if: env.valid_request == 'true'
        run: |
          if [ "${{ env.already_fully_member }}" == "true" ]; then
            COMMENT_BODY="✅ @${{ env.USERNAME }} is already a full member (organization + teams)!"
          else
            COMMENT_BODY="🎉 @${{ env.USERNAME }} has been invited and added to required teams! Welcome aboard!"
          fi

          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -d "{\"body\":\"$COMMENT_BODY\"}"

      - name: Close the issue
        if: env.valid_request == 'true'
        run: |
          echo "Closing the issue..."
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.ORG_RPAPUB_ADMIN_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
            -d '{"state":"closed"}'
